/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.seqera.tower.cli.credentials;

import io.seqera.tower.ApiException;
import io.seqera.tower.cli.BaseCmdTest;
import io.seqera.tower.cli.exceptions.CredentialsNotFoundException;
import io.seqera.tower.cli.exceptions.ShowUsageException;
import io.seqera.tower.cli.responses.CredentialsDeleted;
import io.seqera.tower.cli.responses.CredentialsList;
import io.seqera.tower.model.Credentials;
import org.junit.jupiter.api.Test;
import org.mockserver.client.MockServerClient;
import org.mockserver.model.MediaType;

import java.time.OffsetDateTime;
import java.util.Arrays;

import static io.seqera.tower.cli.commands.AbstractApiCmd.USER_WORKSPACE_NAME;
import static org.apache.commons.lang3.StringUtils.chop;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockserver.matchers.Times.exactly;
import static org.mockserver.model.HttpRequest.request;
import static org.mockserver.model.HttpResponse.response;

class CredentialsCmdTest extends BaseCmdTest {

    @Test
    void testDelete(MockServerClient mock) {
        mock.when(
                request().withMethod("DELETE").withPath("/credentials/1cz5A8cuBkB5iJliCwJCFU"), exactly(1)
        ).respond(
                response().withStatusCode(204)
        );

        ExecOut out = exec(mock, "credentials", "delete", "-i", "1cz5A8cuBkB5iJliCwJCFU");

        assertEquals("", out.stdErr);
        assertEquals(new CredentialsDeleted("1cz5A8cuBkB5iJliCwJCFU", USER_WORKSPACE_NAME).toString(), out.stdOut);
        assertEquals(0, out.exitCode);
    }

    @Test
    void testDeleteNotFound(MockServerClient mock) {
        mock.when(
                request().withMethod("DELETE").withPath("/credentials/1cz5A8cuBkB5iKKiCwJCFU"), exactly(1)
        ).respond(
                response().withStatusCode(403)
        );

        ExecOut out = exec(mock, "credentials", "delete", "-i", "1cz5A8cuBkB5iKKiCwJCFU");

        assertEquals(errorMessage(out.app, new CredentialsNotFoundException("1cz5A8cuBkB5iKKiCwJCFU", USER_WORKSPACE_NAME)), out.stdErr);
        assertEquals("", out.stdOut);
        assertEquals(-1, out.exitCode);
    }

    @Test
    void testList(MockServerClient mock) {

        mock.when(
                request().withMethod("GET").withPath("/credentials"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResource("credentials_list")).withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(mock, "credentials", "list");

        assertEquals("", out.stdErr);
        assertEquals(chop(new CredentialsList(USER_WORKSPACE_NAME, Arrays.asList(
                new Credentials().id("2ba2oekqeTEBzwSDgXg7xf")
                        .name("ssh")
                        .provider(Credentials.ProviderEnum.SSH)
                        .lastUsed(OffsetDateTime.parse("2021-09-06T08:53:51Z"))
                        .dateCreated(OffsetDateTime.parse("2021-09-06T06:54:53Z"))
                        .lastUpdated(OffsetDateTime.parse("2021-09-06T06:54:53Z")),
                new Credentials().id("57Ic6reczFn78H1DTaaXkp")
                        .name("azure")
                        .provider(Credentials.ProviderEnum.AZURE)
                        .dateCreated(OffsetDateTime.parse("2021-09-07T13:50:21Z"))
                        .lastUpdated(OffsetDateTime.parse("2021-09-07T13:50:21Z"))
        )).toString()), out.stdOut);
        assertEquals(0, out.exitCode);
    }

    @Test
    void testInvalidAuth(MockServerClient mock) {
        mock.when(
                request().withMethod("DELETE").withPath("/credentials/1cz5A8cuBkB5iJliCwJCFT"), exactly(1)
        ).respond(
                response().withStatusCode(401)
        );

        ExecOut out = exec(mock, "credentials", "delete", "-i", "1cz5A8cuBkB5iJliCwJCFT");

        assertEquals(errorMessage(out.app, new ApiException(401, "Unauthorized")), out.stdErr);
        assertEquals("", out.stdOut);
        assertEquals(-1, out.exitCode);
    }

    @Test
    void testShowUsage(MockServerClient mock) {

        ExecOut out = exec(mock, "credentials");

        if (out.app != null) {
            assertEquals(errorMessage(out.app, new ShowUsageException()), out.stdErr);
            assertEquals("", out.stdOut);
            assertEquals(-1, out.exitCode);
        }
    }



}
