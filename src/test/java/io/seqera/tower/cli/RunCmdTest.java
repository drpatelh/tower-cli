/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.seqera.tower.cli;

import org.junit.jupiter.api.Test;
import org.mockserver.client.MockServerClient;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockserver.matchers.Times.exactly;
import static org.mockserver.model.HttpRequest.request;
import static org.mockserver.model.HttpResponse.response;

class RunCmdTest extends BaseCmdTest {

    @Test
    void testInvalidAuth(MockServerClient mock) {

        // Create server expectation
        mock.when(
                request().withMethod("GET").withPath("/pipelines"), exactly(1)
        ).respond(
                response().withStatusCode(401)
        );

        // Run the command
        ExecOut out = exec(mock, "run", "hello");

        // Assert results
        assertEquals(String.format("Unauthorized%n"), out.stdErr);
        assertEquals("", out.stdOut);
        assertEquals(-1, out.exitCode);

    }

    @Test
    void testPipelineNotfound(MockServerClient mock) {

        // Create server expectation
        mock.when(
                request().withMethod("GET").withPath("/pipelines"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResponse("pipelines_none"))
        );

        // Run the command
        ExecOut out = exec(mock, "run", "hello");

        // Assert results
        assertEquals(-1, out.exitCode);
        assertEquals(String.format("Pipeline 'hello' not found on this workspace.%n"), out.stdOut);
        assertEquals("", out.stdErr);

    }

    @Test
    void testMultiplePipelinesFound(MockServerClient mock) {

        // Create server expectation
        mock.when(
                request().withMethod("GET").withPath("/pipelines"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResponse("pipelines_multiple"))
        );

        // Run the command
        ExecOut out = exec(mock, "run", "hello");

        // Assert results
        assertEquals(-1, out.exitCode);
        assertEquals(String.format("Multiple pipelines match 'hello'%n"), out.stdOut);
        assertEquals("", out.stdErr);
    }

    @Test
    void testSubmitUserPipeline(MockServerClient mock) {

        // Create server expectation
        mock.when(
                request().withMethod("GET").withPath("/pipelines"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResponse("pipelines_sarek"))
        );

        mock.when(
                request().withMethod("GET").withPath("/pipelines/250911634275687/launch"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResponse("pipeline_launch_describe"))
        );

        mock.when(
                request().withMethod("POST").withPath("/workflow/launch"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResponse("workflow_launch"))
        );

        mock.when(
                request().withMethod("GET").withPath("/user"), exactly(1)
        ).respond(
                response().withStatusCode(200).withBody(loadResponse("user"))
        );

        // Run the command
        ExecOut out = exec(mock, "run", "sarek");

        // Assert results
        assertEquals(0, out.exitCode);
        assertEquals(String.format("Workflow submitted. Check it here:%n%s/user/jordi/watch/35aLiS0bIM5efd%n", url(mock)), out.stdOut);
        assertEquals("", out.stdErr);

    }

}
