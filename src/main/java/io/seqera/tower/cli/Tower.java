/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.seqera.tower.cli;

import io.seqera.tower.cli.commands.CredentialsCmd;
import io.seqera.tower.cli.commands.RunCmd;
import picocli.AutoComplete.GenerateCompletion;
import picocli.CommandLine;
import picocli.CommandLine.ArgGroup;
import picocli.CommandLine.Command;
import picocli.CommandLine.HelpCommand;
import picocli.CommandLine.Model.CommandSpec;
import picocli.CommandLine.Option;
import picocli.CommandLine.Spec;

import java.util.concurrent.Callable;


@Command(
        name = "towr",
        description = "Nextflow Tower CLI",
        version = "Tower 0.1.0",
        mixinStandardHelpOptions = true,
        subcommands = {
                RunCmd.class,
                CredentialsCmd.class,
                HelpCommand.class,
                GenerateCompletion.class
        }
)
public class Tower implements Callable<Integer> {
    @Spec
    public CommandSpec spec;

    @Option(names = {"--access-token"}, description = "Tower personal access token", defaultValue = "${TOWER_ACCESS_TOKEN}", required = true)
    public String token;

    @Option(names = {"--url"}, description = "Tower server URL", defaultValue = "${TOWER_SERVER_URL:-https://api.tower.nf}", required = true)
    public String url;

    @Option(names = {"--workspace-id"}, description = "Workspace numeric identifier", defaultValue = "${TOWER_WORKSPACE_ID}")
    public Long workspaceId;

    @Option(names = {"--x-ray"}, description = "Shows HTTP request/response logs at stderr")
    public boolean xRay;

    @Option(names = {"--json"}, description = "Show output as JSON")
    public boolean json;

    @ArgGroup(exclusive = false)
    public OrgAndWorkspace orgAndWorkspaceNames;

    public static class OrgAndWorkspace {
        @Option(names = {"--workspace-name"}, description = "Workspace name", defaultValue = "${TOWER_WORKSPACE_NAME}")
        public String workspaceName;

        @Option(names = {"--org-name"}, description = "Organization name", defaultValue = "${TOWER_ORG_NAME}")
        public String orgName;
    }

    public Tower() {
    }

    public static void main(String[] args) {
        Tower app = new Tower();
        CommandLine cmd = new CommandLine(app);
        int exitCode = cmd.execute(args);
        System.exit(exitCode);
    }

    @Override
    public Integer call() {
        // if the command was invoked without subcommand, show the usage help
        spec.commandLine().usage(System.err);
        return -1;
    }

    public void println(String content) {
        spec.commandLine().getOut().println(content);
    }

    public void printerr(String content) {
        spec.commandLine().getErr().println(content);
    }
}
