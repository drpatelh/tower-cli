plugins {
    id 'java'
    id 'application'
    id 'com.palantir.graal' version "0.7.2"
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven { url = "https://s3-eu-west-1.amazonaws.com/maven.seqera.io/snapshots" }
}

dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation "ch.qos.logback:logback-core:1.2.3"
    implementation "ch.qos.logback:logback-classic:1.2.3"
    implementation 'info.picocli:picocli:4.1.0'
    annotationProcessor 'info.picocli:picocli-codegen:4.1.0'

    implementation("io.micronaut:micronaut-inject:2.1.2")
    implementation("io.micronaut:micronaut-http-client:2.1.2")
    annotationProcessor("io.micronaut:micronaut-inject-java:2.1.2")

    implementation("io.seqera:tower-core:20.11.0-SNAPSHOT") { transitive = false }
    implementation "org.codehaus.groovy:groovy:3.0.5"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    options.compilerArgs += ["-Aproject=${project.name}"]
}

application {
    // Define the main class for the application.
    mainClassName = 'io.nativecli.App'
    applicationDefaultJvmArgs = ["-agentlib:native-image-agent=config-output-dir=conf/"]
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

graal {
    mainClass 'io.nativecli.App'
    outputName 'towr'
    option '--allow-incomplete-classpath'
    option '--report-unsupported-elements-at-runtime'
    option '--initialize-at-build-time'
    option '--initialize-at-run-time=org.codehaus.groovy.control.XStreamUtils'
    option '--no-fallback'
    option '--no-server'
    option '-H:ConfigurationFileDirectories=conf/'  
}
